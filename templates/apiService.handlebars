/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { Injectable } from '@angular/core';
import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable{{#if promises}}, firstValueFrom{{/if}} } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { {{configurationClass}} } from './{{configurationFile}}';
import { {{responseClass}} } from './{{responseFile}}';

export type ApiFnOptional<P, R> = (http: HttpClient, rootUrl: string, params?: P, context?: HttpContext) => Observable<StrictHttpResponse<R>>;
export type ApiFnRequired<P, R> = (http: HttpClient, rootUrl: string, params: P, context?: HttpContext) => Observable<StrictHttpResponse<R>>;

/**
 * Helper service to call API functions directly
 */
@Injectable({ providedIn: 'root' })
export class {{apiServiceClass}} {
  constructor(
    private config: {{configurationClass}},
    private http: HttpClient
  ) {
  }

  private _rootUrl?: string;

  /**
   * Returns the root url for API operations. If not set directly here,
   * will fallback to `{{configurationClass}}.rootUrl`.
   */
  get rootUrl(): string {
    return this._rootUrl || this.config.rootUrl;
  }

  /**
   * Sets the root URL for API operations
   */
  set rootUrl(rootUrl: string) {
    this._rootUrl = rootUrl;
  }

  /**
   * Executes an API call, returning the response body only
   */
  invoke<P, R>(fn: ApiFnRequired<P, R>, params: P, context?: HttpContext): {{#if promises}}Promise<R>{{else}}Observable<R>{{/if}};
  invoke<P, R>(fn: ApiFnOptional<P, R>, params?: P, context?: HttpContext): {{#if promises}}Promise<R>{{else}}Observable<R>{{/if}};
  {{#if promises}}async {{/if}}invoke<P, R>(fn: ApiFnRequired<P, R> | ApiFnOptional<P, R>, params: P, context?: HttpContext): {{#if promises}}Promise<R>{{else}}Observable<R>{{/if}} {
    const resp = this.invoke$Response(fn, params, context);
    {{#if promises}}
    return (await resp).body;
    {{else}}
    return resp.pipe(map(r => r.body));
    {{/if}}
  }

  /**
   * Executes an API call, returning the entire response
   */
  invoke$Response<P, R>(fn: ApiFnRequired<P, R>, params: P, context?: HttpContext): {{#if promises}}Promise<StrictHttpResponse<R>>{{else}}Observable<StrictHttpResponse<R>>{{/if}};
  invoke$Response<P, R>(fn: ApiFnOptional<P, R>, params?: P, context?: HttpContext): {{#if promises}}Promise<StrictHttpResponse<R>>{{else}}Observable<StrictHttpResponse<R>>{{/if}};
  invoke$Response<P, R>(fn: ApiFnRequired<P, R> | ApiFnOptional<P, R>, params: P, context?: HttpContext): {{#if promises}}Promise<StrictHttpResponse<R>>{{else}}Observable<StrictHttpResponse<R>>{{/if}} {
    const obs = fn(this.http, this.rootUrl, params, context)
      .pipe(
        filter(r => r instanceof HttpResponse),
        map(r => r as StrictHttpResponse<R>));
    {{#if promises}}
    return firstValueFrom(obs);
    {{else}}
    return obs;
    {{/if}}
  }
}
